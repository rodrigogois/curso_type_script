{"version":3,"file":"post-new-page.js","sourceRoot":"","sources":["../../../src/page/post-new-page.ts"],"names":[],"mappings":";;;IAMA;QACE,qBAAoB,QAAkB;YAAlB,aAAQ,GAAR,QAAQ,CAAU;YACpC,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC;QAEM,0BAAI,GAAX;YAAA,iBAQC;YAPC,QAAQ;iBACL,aAAa,CAAC,UAAU,CAAC;iBACzB,gBAAgB,CAAC,QAAQ,EAAE,UAAC,KAAY;gBACvC,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,KAAI,CAAC,MAAM,EAAE,CAAC;gBACd,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,4BAAM,GAAb;YAAA,iBAWC;YAVC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;gBAClB,OAAO;aACR;YAED,IAAI,CAAC,QAAQ;iBACV,IAAI,CAAC;gBACJ,IAAI,EAAE,cAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;gBACrC,KAAK,EAAE,cAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;aACxC,CAAC;iBACD,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,YAAY,EAAE,EAAnB,CAAmB,CAAC,CAAC;QACxC,CAAC;QAEM,kCAAY,GAAnB;YACE,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,sBAAsB,CAAC;QAChD,CAAC;QAEM,6BAAO,GAAd;YACE,IAAM,SAAS,GAAG,IAAI,2BAAgB,CAAC;gBACrC;oBACE,aAAa,EAAE,QAAQ;oBACvB,oDAAoD;oBACpD,KAAK,EAAE,CAAC,oBAAU,CAAC,QAAQ,CAAC;oBAC5B,cAAc,EAAE,iBAAiB;iBAClC;gBACD;oBACE,aAAa,EAAE,OAAO;oBACtB,oDAAoD;oBACpD,KAAK,EAAE,CAAC,oBAAU,CAAC,QAAQ,CAAC;oBAC5B,cAAc,EAAE,mBAAmB;iBACpC;aACF,CAAC,CAAC;YACH,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QACH,kBAAC;IAAD,CAAC,AAjDD,IAiDC;IAED,IAAI,WAAW,CAAC,IAAI,mBAAQ,EAAE,CAAC,CAAC","sourcesContent":["import Form from \"../components/form\";\r\nimport ValidatorManager from \"../components/validators/validator-manager\";\r\nimport Validators from \"../components/validators/validators\";\r\nimport PostHttp from \"../http/post-http\";\r\nimport Page from \"./page\";\r\n\r\nclass PostNewPage implements Page {\r\n  constructor(private postHttp: PostHttp) {\r\n    this.init();\r\n  }\r\n\r\n  public init(): void {\r\n    document\r\n      .querySelector(\"#my-form\")\r\n      .addEventListener(\"submit\", (event: Event) => {\r\n        event.preventDefault();\r\n        this.submit();\r\n        return false;\r\n      });\r\n  }\r\n\r\n  public submit(): void {\r\n    if (this.isvalid()) {\r\n      return;\r\n    }\r\n\r\n    this.postHttp\r\n      .save({\r\n        body: Form.getValueFromField(\"#body\"),\r\n        title: Form.getValueFromField(\"#title\"),\r\n      })\r\n      .then((obj) => this.goToListPost());\r\n  }\r\n\r\n  public goToListPost(): void {\r\n    window.location.href = \"/post/post-list.html\";\r\n  }\r\n\r\n  public isvalid(): boolean {\r\n    const validator = new ValidatorManager([\r\n      {\r\n        selectorField: \"#title\",\r\n        // tslint:disable-next-line:object-literal-sort-keys\r\n        rules: [Validators.required],\r\n        messageInvalid: \"Titulo invalido\",\r\n      },\r\n      {\r\n        selectorField: \"#body\",\r\n        // tslint:disable-next-line:object-literal-sort-keys\r\n        rules: [Validators.required],\r\n        messageInvalid: \"Conteudo invalido\",\r\n      }\r\n    ]);\r\n    return validator.isValid();\r\n  }\r\n}\r\n\r\nnew PostNewPage(new PostHttp());\r\n"]}