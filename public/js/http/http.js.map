{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../src/http/http.ts"],"names":[],"mappings":";;;IAEA,IAAK,SAGJ;IAHD,WAAK,SAAS;QACV,wBAAW,CAAA;QACX,0BAAa,CAAA;IACjB,CAAC,EAHI,SAAS,KAAT,SAAS,QAGb;IAED;QAAA;QAmCA,CAAC;QAjCU,kBAAG,GAAV,UAAW,GAAW;YAAtB,iBAMC;YALG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAC/B,IAAM,KAAK,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBACnD,KAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC/C,KAAK,CAAC,IAAI,EAAE,CAAC;YACjB,CAAC,CAAC,CAAC;QACP,CAAC;QAEM,mBAAI,GAAX,UAAY,GAAW,EAAE,IAAY;YAArC,iBAMC;YALG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBAC/B,IAAM,KAAK,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gBACpD,KAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC/C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACP,CAAC;QAEO,0BAAW,GAAnB,UAAoB,IAAe,EAAE,GAAW;YAC5C,IAAM,KAAK,GAAG,IAAI,cAAc,EAAE,CAAC;YACnC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YAC5B,OAAO,KAAK,CAAC;QACjB,CAAC;QAEO,gCAAiB,GAAzB,UAA0B,KAAK,EAAE,OAAO,EAAE,MAAM;YAC5C,KAAK,CAAC,kBAAkB,GAAG;gBACvB,IAAI,IAAI,CAAC,UAAU,KAAK,CAAC,EAAE;oBACvB,IAAM,QAAQ,GAAG,IAAI,kBAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC9D,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;wBACzC,OAAO,CAAC,QAAQ,CAAC,CAAC;qBACrB;iBACJ;YAEL,CAAC,CAAC;QACN,CAAC;QACL,WAAC;IAAD,CAAC,AAnCD,IAmCC","sourcesContent":["import Response from \"./response\";\r\n\r\nenum HttpVerbs {\r\n    GET = \"GET\",\r\n    POST = \"POST\",\r\n}\r\n\r\nexport default class Http {\r\n\r\n    public get(url: string): Promise<Response> {\r\n        return new Promise((resolve, reject) => {\r\n            const xhttp = this.createXhttp(HttpVerbs.GET, url);\r\n            this.configureCallback(xhttp, resolve, reject);\r\n            xhttp.send();\r\n        });\r\n    }\r\n\r\n    public post(url: string, data: object): Promise<Response> {\r\n        return new Promise((resolve, reject) => {\r\n            const xhttp = this.createXhttp(HttpVerbs.POST, url);\r\n            this.configureCallback(xhttp, resolve, reject);\r\n            xhttp.send(JSON.stringify(data));\r\n        });\r\n    }\r\n\r\n    private createXhttp(verb: HttpVerbs, url: string) {\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.open(verb, url, true);\r\n        return xhttp;\r\n    }\r\n\r\n    private configureCallback(xhttp, resolve, reject) {\r\n        xhttp.onreadystatechange = function() {\r\n            if (this.readyState === 4) {\r\n                const response = new Response(this.responseText, this.status);\r\n                if (this.status.toString().startsWith(\"20\")) {\r\n                    resolve(response);\r\n                }\r\n            }\r\n\r\n        };\r\n    }\r\n}"]}